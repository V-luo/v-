遍历数组，找到最大的三个数和最小的两个数，乘积最大的数可能为最大的三个数相乘或最小的两个数和最大的一个数相乘
class Solution {
public:
    /**
     * 最大乘积
     * @param A int整型一维数组 
     * @param ALen int A数组长度
     * @return long长整型
     */
    long long solve(int* A, int ALen) {
        long long minn1 = INT_MAX, minn2 = INT_MAX;
        long long maxn1 = INT_MIN, maxn2 = INT_MIN, maxn3 = INT_MIN;

        for (int i = 0; i < ALen; i++) {
            if (A[i] > maxn1) {
                maxn3 = maxn2;
                maxn2 = maxn1;
                maxn1 = A[i];
            } else if (A[i] > maxn2) {
                maxn3 = maxn2;
                maxn2 = A[i];
            } else if (A[i] > maxn3) {
                maxn3 = A[i];
            }
            if (A[i] < minn1) {
                minn2 = minn1;
                minn1 = A[i];
            } else if (A[i] < minn2) {
                minn2 = A[i];
            }
        }

        return max((maxn1 * maxn2 * maxn3), (maxn1 * minn1 * minn2));
    }
};
