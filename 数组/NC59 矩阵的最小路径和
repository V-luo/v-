使用动态规划的迭代法：因为只能向下和向右走，dp[i][j]表示从左上到当前i行j列格子的最短距离
确定临界值：第一行第一列的值可确定，第一行为dp[1][i]=dp[1][i-1]+matrix[0][i-1];
第一列为：dp[i][1]=dp[i-1][1]+matrix[i-1][0];
状态转移公式：dp[i][j]=min(dp[i-1][j],dp[i][j-1])+matrix[i-1][j-1];
class Solution {
public:
    /**
     * 
     * @param matrix int整型vector<vector<>> the matrix
     * @return int整型
     */
    int minPathSum(vector<vector<int> >& matrix) {
        // write code here
        int n = matrix.size();
        int m = matrix[0].size();
        int dp[n+1][m+1];
        dp[1][1]=matrix[0][0];
        for(int i = 2;i<=m;i++)
            dp[1][i]=dp[1][i-1]+matrix[0][i-1];
        for(int i = 2;i<=n;i++)
            dp[i][1]=dp[i-1][1]+matrix[i-1][0];
        for(int i =2;i<=n;i++)
            for(int j = 2;j<=m;j++)
                dp[i][j]=min(dp[i-1][j],dp[i][j-1])+matrix[i-1][j-1];
        return dp[n][m];
    }
};
