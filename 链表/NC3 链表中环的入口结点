快慢指针，快指针一次走两步，慢指针一次一步，若相遇则说明有环，相遇后，慢指针从头开始，快指针从相遇点开始，每次都走一步，当再次相遇时，即为环入口
证明结论2：
设：
链表头到环入口长度为--a
环入口到相遇点长度为--b
相遇点到环入口长度为--c
快指针路程=a+(b+c)k+b ，k>=1  其中b+c为环的长度，k为绕环的圈数（k>=1,即最少一圈，不能是0圈，不然和慢指针走的一样长，矛盾）。
慢指针路程=a+b
快指针走的路程是慢指针的两倍，所以：
（a+b）*2=a+(b+c)k+b
化简可得：
a=(k-1)(b+c)+c 这个式子的意思是： 链表头到环入口的距离=相遇点到环入口的距离+（k-1）圈环长度。其中k>=1,所以k-1>=0圈。所以两个指针分别从链表头和相遇点出发，最后一定相遇于环入口。
class Solution {
public:
    ListNode* EntryNodeOfLoop(ListNode* pHead) {
        ListNode* fast,* slow;
        fast = slow = pHead;
        while(fast&&fast->next)
        {
            fast = fast->next->next;
            slow = slow->next;
            if(fast==slow)
                break;
        }
        if(!fast||!fast->next)
            return NULL;
        slow = pHead;
        while(slow!=fast)
        {
            fast = fast->next;
            slow = slow->next;
        }
        return slow;
    }
};
